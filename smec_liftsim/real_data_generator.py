import os
import sys
import glob
import pickle
import random
from smec_liftsim.utils import EPSILON
from smec_liftsim.utils import PersonType
from smec_liftsim.mansion_configs import MansionConfig
from smec_liftsim.person_generators import PersonGeneratorBase

from offline_tools.generate_dataset import generate_dataset
import numpy as np

MIN_WEIGHT = 50
MAX_WEIGHT = 100


class RealDataGenerator(PersonGeneratorBase):
    """
    Fetch data from disk and generate person data.
    """
    def __init__(self, data_folder):
        super().__init__()
        self._cur_id = 0
        self.data_folder = data_folder
        # read data from disk.
        # self.pass_list = []
        # for i in range(1, 31):
        #     cur_name = str(i) + '_elvx.pkl'
        #     cur_path = os.path.join(self.data_folder, cur_name)
        #     cur_pass = pickle.load(open(cur_path, 'rb'))
        #     self.pass_list.append(cur_pass)
        # print("Got all passenger information from disk!")

        self.probabilities = [[0.0, 0.0, 0.165, 0.32611111111111113, 0.5005555555555555, 0.335, 0.325, 0.44, 0.35444444444444445, 0.4288888888888889, 0.3416666666666667, 0.235, 0.325, 0.3433333333333333, 0.4766666666666667, 0.3338888888888889, 0.31555555555555553], [0.0, 0.0, 0.2238888888888889, 0.4822222222222222, 0.7138888888888889, 0.49277777777777776, 0.49722222222222223, 0.6844444444444444, 0.4888888888888889, 0.6716666666666666, 0.4961111111111111, 0.34833333333333333, 0.5183333333333333, 0.4911111111111111, 0.7455555555555555, 0.5077777777777778, 0.4905555555555556], [0.03722222222222222, 0.065, 0.0, 0.012777777777777779, 0.026111111111111113, 0.016666666666666666, 0.017222222222222222, 0.011666666666666667, 0.01, 0.013888888888888888, 0.0077777777777777776, 0.012222222222222223, 0.016666666666666666, 0.015555555555555555, 0.019444444444444445, 0.014444444444444444, 0.013333333333333334], [0.08055555555555556, 0.125, 0.015, 0.0, 0.043333333333333335, 0.019444444444444445, 0.030555555555555555, 0.03333333333333333, 0.023333333333333334, 0.03722222222222222, 0.03666666666666667, 0.026111111111111113, 0.028333333333333332, 0.02666666666666667, 0.04555555555555556, 0.029444444444444443, 0.03611111111111111], [0.14055555555555554, 0.19277777777777777, 0.02388888888888889, 0.04888888888888889, 0.0, 0.03222222222222222, 0.04555555555555556, 0.05, 0.03277777777777778, 0.06166666666666667, 0.03888888888888889, 0.03611111111111111, 0.04111111111111111, 0.04111111111111111, 0.06888888888888889, 0.04722222222222222, 0.04], [0.08166666666666667, 0.145, 0.01611111111111111, 0.03, 0.042777777777777776, 0.0, 0.03333333333333333, 0.030555555555555555, 0.029444444444444443, 0.03833333333333333, 0.03166666666666667, 0.020555555555555556, 0.03833333333333333, 0.025, 0.03277777777777778, 0.025, 0.025555555555555557], [0.08833333333333333, 0.12666666666666668, 0.015, 0.03888888888888889, 0.04888888888888889, 0.03, 0.0, 0.034444444444444444, 0.02722222222222222, 0.04, 0.03222222222222222, 0.016666666666666666, 0.028888888888888888, 0.025, 0.03833333333333333, 0.02666666666666667, 0.026111111111111113], [0.08833333333333333, 0.1761111111111111, 0.020555555555555556, 0.04111111111111111, 0.06666666666666667, 0.04388888888888889, 0.04055555555555555, 0.0, 0.03944444444444444, 0.05444444444444444, 0.03944444444444444, 0.03166666666666667, 0.03722222222222222, 0.042222222222222223, 0.06111111111111111, 0.03722222222222222, 0.043333333333333335], [0.08277777777777778, 0.12944444444444445, 0.011666666666666667, 0.030555555555555555, 0.04611111111111111, 0.03222222222222222, 0.035, 0.034444444444444444, 0.0, 0.044444444444444446, 0.026111111111111113, 0.02, 0.02388888888888889, 0.028888888888888888, 0.044444444444444446, 0.030555555555555555, 0.023333333333333334], [0.10777777777777778, 0.14944444444444444, 0.01611111111111111, 0.04666666666666667, 0.058333333333333334, 0.03777777777777778, 0.05, 0.05444444444444444, 0.034444444444444444, 0.0, 0.035, 0.03333333333333333, 0.03611111111111111, 0.05333333333333334, 0.06444444444444444, 0.044444444444444446, 0.03833333333333333], [0.08777777777777777, 0.11833333333333333, 0.01611111111111111, 0.028888888888888888, 0.04, 0.025555555555555557, 0.021666666666666667, 0.03388888888888889, 0.030555555555555555, 0.035, 0.0, 0.028888888888888888, 0.03166666666666667, 0.03333333333333333, 0.04777777777777778, 0.03277777777777778, 0.029444444444444443], [0.05444444444444444, 0.07944444444444444, 0.006666666666666667, 0.021111111111111112, 0.03611111111111111, 0.017222222222222222, 0.025555555555555557, 0.03111111111111111, 0.01888888888888889, 0.03277777777777778, 0.018333333333333333, 0.0, 0.02277777777777778, 0.025555555555555557, 0.028333333333333332, 0.017777777777777778, 0.020555555555555556], [0.09222222222222222, 0.1411111111111111, 0.018333333333333333, 0.025555555555555557, 0.042222222222222223, 0.035, 0.03, 0.04055555555555555, 0.03722222222222222, 0.03277777777777778, 0.042777777777777776, 0.02, 0.0, 0.03111111111111111, 0.04, 0.021666666666666667, 0.03166666666666667], [0.09388888888888888, 0.12555555555555556, 0.010555555555555556, 0.015, 0.051666666666666666, 0.028888888888888888, 0.03222222222222222, 0.03166666666666667, 0.02722222222222222, 0.044444444444444446, 0.02388888888888889, 0.019444444444444445, 0.025, 0.0, 0.044444444444444446, 0.025555555555555557, 0.03833333333333333], [0.13722222222222222, 0.16833333333333333, 0.02277777777777778, 0.042777777777777776, 0.05722222222222222, 0.043333333333333335, 0.04888888888888889, 0.06777777777777778, 0.035, 0.06388888888888888, 0.045, 0.042222222222222223, 0.043333333333333335, 0.051666666666666666, 0.0, 0.042777777777777776, 0.03], [0.09333333333333334, 0.12444444444444444, 0.007222222222222222, 0.02, 0.03777777777777778, 0.03388888888888889, 0.02666666666666667, 0.03388888888888889, 0.034444444444444444, 0.05, 0.026111111111111113, 0.022222222222222223, 0.03388888888888889, 0.023333333333333334, 0.03833333333333333, 0.0, 0.03111111111111111], [0.09166666666666666, 0.10944444444444444, 0.014444444444444444, 0.03722222222222222, 0.03388888888888889, 0.034444444444444444, 0.028888888888888888, 0.035555555555555556, 0.022222222222222223, 0.04, 0.02277777777777778, 0.026111111111111113, 0.03777777777777778, 0.028888888888888888, 0.04111111111111111, 0.035555555555555556, 0.0]]

    def configure(self, configuration):
        self._cur_id = 0

    def generate_person(self):
        """
        Generate Random Persons from Poisson Distribution
        Returns:
          List of Random Persons
        """
        ret_persons = []
        time_interval = self._config.raw_time - self._last_generate_time  # 0.5
        # print('time_interval: {}'.format(time_interval))
        for i in range(17):
            for j in range(17):
                if i==j:
                    continue
                generate_probability = time_interval / 60 * self.probabilities[i][j]
                # print('{} to {} generate_probability: {:5f}'.format(i+1, j+1, generate_probability))
                if random.random() < generate_probability:
                    # random_weight = random.uniform(MIN_WEIGHT, MAX_WEIGHT)
                    random_weight = np.random.normal(loc=60, scale=10)
                    ret_persons.append(
                        PersonType(
                            self._cur_id,
                            random_weight,
                            i + 1,
                            j + 1,
                            self._config.raw_time))
                    self._cur_id += 1
        self._last_generate_time = self._config.raw_time
        if len(ret_persons) > 0:
            print('{} generate {} person.'.format(self._config.raw_time, len(ret_persons)))
        return ret_persons

